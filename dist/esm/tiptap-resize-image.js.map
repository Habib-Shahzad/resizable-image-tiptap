{"version":3,"file":"tiptap-resize-image.js","sources":["../../src/ResizableImage/wrapper/index.tsx","../../src/ResizableImage/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { NodeViewWrapper } from \"@tiptap/react\";\nimport { Resizable } from \"re-resizable\";\nimport { Node as ProsemirrorNode } from \"prosemirror-model\";\n\ninterface WrapperProps {\n  node: ProsemirrorNode;\n  updateAttributes: (attrs: unknown) => void;\n}\n\nexport default function ResizableImageWrapper(props: WrapperProps) {\n  return (\n    <NodeViewWrapper className=\"image-resizer\">\n      <Resizable\n        defaultSize={{\n          width: props.node.attrs.width,\n          height: props.node.attrs.height,\n        }}\n        onResize={(e, direction, ref) => {\n          props.updateAttributes({\n            width: ref.style.width,\n            height: ref.style.height,\n          });\n        }}\n        maxWidth={\"100%\"}\n        style={{\n          backgroundImage: `url(${props.node.attrs.src})`,\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n        lockAspectRatio={true}\n      ></Resizable>\n    </NodeViewWrapper>\n  );\n}\n","import { mergeAttributes, Node, nodeInputRule } from \"@tiptap/core\";\nimport { ReactNodeViewRenderer } from \"@tiptap/react\";\nimport ResizableImageWrapper from \"./wrapper\";\n\ninterface ImageOptions {\n  inline: boolean;\n  allowBase64: boolean;\n  HTMLAttributes: Record<string, string>;\n}\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    customImage: {\n      /**\n       * Add an image\n       */\n      setImage: (options: {\n        src: string;\n        alt?: string;\n        title?: string;\n        height?: string;\n        width?: string;\n      }) => ReturnType;\n    };\n  }\n}\n\nconst inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\n\nexport const ResizableImage = Node.create<ImageOptions>({\n  name: \"image\",\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {},\n    };\n  },\n\n  inline() {\n    return this.options.inline;\n  },\n\n  group() {\n    return this.options.inline ? \"inline\" : \"block\";\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n      height: {\n        default: null,\n      },\n      width: {\n        default: null,\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"img\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { height, width } = HTMLAttributes;\n    const attributes = {\n      ...HTMLAttributes,\n      style: `height: ${height} !important; width: ${width} !important;`,\n    };\n    return [\"img\", mergeAttributes(this.options.HTMLAttributes, attributes)];\n  },\n\n  addCommands() {\n    return {\n      setImage:\n        (options) =>\n        ({ commands }) => {\n          return commands.insertContent({\n            type: this.name,\n            attrs: options,\n          });\n        },\n    };\n  },\n\n  addNodeView() {\n    return ReactNodeViewRenderer(ResizableImageWrapper);\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: (match) => {\n          const [, , alt, src, title, height, width] = match;\n          return { src, alt, title, height, width };\n        },\n      }),\n    ];\n  },\n});\n"],"names":[],"mappings":"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"}